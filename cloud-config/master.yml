#cloud-config

write_files:
  - path: /root/k3s-helper.py
    permissions: 0755
    content: |
      #!/usr/bin/env python
      from bottle import get, run, abort
      from subprocess import check_output
      from socket import gethostname
      from signal import signal, setitimer, ITIMER_REAL, SIGALRM

      def cleanup(signum, frame):
          try:
              nodes = check_output('kubectl get nodes', shell=True).strip()
              unlabeled = map(lambda x: x.split()[0], filter(lambda x: '<none>' in x, nodes.split("\n")))
              for node in unlabeled:
                  if "master" not in node:
                      check_output('kubectl label node ' + node + ' --overwrite node-role.kubernetes.io/worker=""')
                  else:
                      check_output('kubectl label node ' + node + ' --overwrite node-role.kubernetes.io/master=""')
              down = map(lambda x: x.split()[0], filter(lambda x: 'NotReady' in x, nodes.split("\n")))
              for node in down:
                  check_output('kubectl cordon ' + node, shell=True)
                  check_output('kubectl delete node ' + node, shell=True)
          except:
              pass

      @get("/join/<hostname>")
      def token(hostname):
          try:
              check_output('kubectl uncordon ' + hostname, shell=True)
          except:
              pass
          return check_output('cat /var/lib/rancher/k3s/server/node-token', shell=True).strip()
      
      @get("/drain/<hostname>")
      def drain(hostname):
          try:
              return check_output('kubectl drain ' + hostname + ' --ignore-daemonsets --delete-local-data', shell=True).strip()
              return check_output('kubectl cordon ' + hostname, shell=True).strip()
          except:
              abort(404, "node not found")
        
      if gethostname() == 'master0':
          signal(SIGALRM, cleanup)
          setitimer(ITIMER_REAL, 120, 10)
          run(port=1337,host='0.0.0.0')
  - path: /etc/systemd/system/k3s-helper.service
    permissions: 0444
    content: |
      [Unit]
      Description=k3s Helper
      DefaultDependencies=no
      After=multi-user.target
      [Service]
      Type=oneshot
      ExecStart=/root/k3s-helper.py
      [Install]
      WantedBy=multi-user.target
  - path: /etc/waagent.conf
    permissions: 0444
    content: |
      ResourceDisk.Format=y
      ResourceDisk.Filesystem=ext4
      ResourceDisk.MountPoint=/mnt/resource
      ResourceDisk.EnableSwap=y
      ResourceDisk.SwapSizeMB=2048
  - path: /var/lib/rancher/k3s/agent/etc/containerd/config.toml.tmpl
    permissions: 0444
    content: |
      [plugins.opt]
      path = "{{ .NodeConfig.Containerd.Opt }}"

      [plugins.cri]
      stream_server_address = "{{ .NodeConfig.AgentConfig.NodeName }}"
      stream_server_port = "10010"
        [plugins.cri.cni]
          bin_dir = "{{ .NodeConfig.AgentConfig.CNIBinDir }}"
          conf_dir = "{{ .NodeConfig.AgentConfig.CNIConfDir }}"

      [plugins.cri.registry.mirrors]
        [plugins.cri.registry.mirrors."docker.io"]
          endpoint = ["https://registry-1.docker.io"]
        [plugins.cri.registry.mirrors."master0:5000"]
          endpoint = ["http://master0:5000"]

mounts:
  - - //${STORAGE_ACCOUNT_NAME}.file.core.windows.net/${SHARE_NAME}
    - /srv
    - cifs
    - vers=3.0,username=${STORAGE_ACCOUNT_NAME},password=${STORAGE_ACCOUNT_KEY},dir_mode=0770,file_mode=0660,uid=1000,gid=1000,noperm,,iocharset=utf8

#apt_update: true
#apt_upgrade: true

packages:
  - ntp
  - tmux
  - htop
  - vim
  - fail2ban
  - curl
  - python-bottle

runcmd:
  - curl -sfL https://get.k3s.io | sh -
  - systemctl enable k3s-helper
  - systemctl start k3s-helper
  #- reboot
