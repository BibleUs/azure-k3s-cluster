#cloud-config

write_files:
  - path: /etc/docker/daemon.json
    permissions: 0644
    content: |
      {
        "log-driver": "json-file",
        "log-opts": {"max-size": "10m", "max-file": "5"}
      }
  - path: /root/k3s-helper.py
    permissions: 0755
    content: |
      #!/usr/bin/env python
      from bottle import get, run, abort
      from subprocess import check_output
      from socket import gethostname
      from signal import signal, setitimer, ITIMER_REAL, SIGALRM
      from sys import stderr

      def cleanup(signum, frame):
          if signum in [9, 15]:
            stderr.write("Exiting on signal %d\n" % signum)
            exit(0)
          try:
              nodes = check_output('kubectl get nodes', shell=True).strip()
              down = map(lambda x: x.split()[0], filter(lambda x: 'NotReady' in x, nodes.split("\n")))
              for node in down:
                  check_output('kubectl cordon ' + node, shell=True)
                  check_output('kubectl delete node ' + node, shell=True)
          except Exception as e:
              stderr.write("%s\n" % e)
              pass

      @get("/join/<hostname>")
      def token(hostname):
          try:
              check_output('kubectl uncordon ' + hostname, shell=True)
          except:
              pass
          return check_output('cat /var/lib/rancher/k3s/server/node-token', shell=True).strip()
      
      @get("/drain/<hostname>")
      def drain(hostname):
          try:
              check_output('kubectl drain ' + hostname + ' --ignore-daemonsets --delete-local-data', shell=True).strip()
              return check_output('kubectl cordon ' + hostname, shell=True).strip()
          except:
              abort(404, "node not found")
        
      if gethostname() == 'master0':
          signal(SIGALRM, cleanup)
          setitimer(ITIMER_REAL, 60, 10)
          run(port=1337,host='0.0.0.0')
  - path: /etc/systemd/system/k3s-helper.service
    permissions: 0444
    content: |
      [Unit]
      Description=k3s Helper
      DefaultDependencies=no
      After=multi-user.target
      [Service]
      Type=oneshot
      ExecStart=/root/k3s-helper.py
      [Install]
      WantedBy=multi-user.target
  - path: /etc/waagent.conf
    permissions: 0444
    content: |
      ResourceDisk.Format=y
      ResourceDisk.Filesystem=ext4
      ResourceDisk.EnableSwap=y
      ResourceDisk.SwapSizeMB=2048
  - path: /etc/rancher/k3s/registries.yaml
    permissions: 0444
    content: |
      mirrors:
        #docker.io:
        #  endpoint:
        #   - https://registry-1.docker.io
        private:
          endpoint:
            - http://master0:5000 


mounts:
  - - //${STORAGE_ACCOUNT_NAME}.file.core.windows.net/${SHARE_NAME}
    - /srv
    - cifs
    - vers=3.0,username=${STORAGE_ACCOUNT_NAME},password=${STORAGE_ACCOUNT_KEY},dir_mode=0770,file_mode=0660,uid=1000,gid=1000,noperm,mfsymlinks,iocharset=utf8

apt_update: true
apt_upgrade: true

packages:
  - ntp
  - tmux
  - htop
  - vim
  - fail2ban
  - curl
  - python-bottle
  - docker.io

runcmd:
  - timedatectl set-timezone Europe/Lisbon
  - curl -sfL https://get.k3s.io | INSTALL_K3S_EXEC="--docker" INSTALL_K3S_VERSION=v1.17.0+k3s.1 sh -
  - chmod a+r /etc/rancher/k3s/k3s.yaml
  - kubectl completion bash | sudo tee /etc/bash_completion.d/kubectl
  - systemctl enable k3s-helper
  #- systemctl start k3s-helper
  - reboot
